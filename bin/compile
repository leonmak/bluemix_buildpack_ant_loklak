#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# parse args
BUILD_DIR=$1
CACHE_DIR=$2

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

VENDOR_DIR="$BUILD_DIR/vendor"
REPOSITORY_ROOT="download.pivotal.io.s3.amazonaws.com"
JDK_VERSION="1.7.0_51"
#JDK="openjdk-${JDK_VERSION}"
JDK="jdk${JDK_VERSION}"
PLATFORM="lucid"
ARCH="x86_64"
#JDK_URL="http://${REPOSITORY_ROOT}/openjdk/${PLATFORM}/${ARCH}/${JDK}.tar.gz"
JDK_URL="https://s3-us-west-2.amazonaws.com/java-r-buildpack/jdk-7u51-linux-i586.tar.gz"
echo "JDK_URL: $JDK_URL" | indent
JAVA_HOME_TEMP="$VENDOR_DIR/$JDK"
#: ${JAVA_HOME=}
#: ${JAVA_CPPFLAGS=~autodetect~}
#: ${JAVA_LD_LIBRARY_PATH=~autodetect~}
#: ${JAVA_LIBS=~autodetect~}

echo "Downloading and unpacking $JDK into '$VENDOR_DIR'" | indent
package_download "${JDK_URL}" "${VENDOR_DIR}"
#wget "${JDK_URL}" --no-check-certificate
#mkdir -p $JAVA_HOME_TEMP
#mv jdk-7u51-linux-x64.tar.gz "${JAVA_HOME_TEMP}"
#tar xzf "${JAVA_HOME_TEMP}/jdk-7u51-linux-x64.tar.gz"
#rm "${JAVA_HOME_TEMP}/jdk-7u51-linux-x64.tar.gz"

echo "JAVA_HOME_TEMP: $JAVA_HOME_TEMP" | indent
#export JAVA_HOME="/app/vendor/${JDK}"
export JAVA_HOME=$JAVA_HOME_TEMP
echo "JAVA_HOME: $JAVA_HOME" | indent

if test -z "${JAVA_HOME}" ; then
  # JAVA_HOME is not set, try to set it if java is in PATH
  echo "ERROR: JAVA_HOME not found in your environment."
  echo "Please, set the JAVA_HOME variable in your environment to match the"
  echo "location of the Java Virtual Machine you want to use."
  exit
fi


# <BUILD_DIR> is (during this stage) a temporary directory. 
# During execution of your slug it'll be known as '/app'.


. $(dirname $0)/common


BIN_DIR=$(cd $(dirname $0); pwd) # absolute path

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}


#create the cache dir if it doesn't exist
mkdir -p $VENDORING_DIR

# change to vendoring dir to install apache ant
cd $VENDORING_DIR

if [ -x $ANT_HOME/bin/ant ] ; then
    #assuming Apache Ant is already installed...
	echo "-----> Using Apache Ant $ANT_VER....."
else
	echo "-----> Installing Apache Ant $ANT_VER..... [start]"
	curl --max-time 180 --location $ANT_URL | tar xz
	chmod +x $ANT_HOME/bin/ant
	echo "-----> Installing Apache Ant $ANT_VER..... [done ]!"
fi


if [ ! -f $BUILD_DIR/build.xml ] ; then
	echo "Failed to build app with Apache Ant"
fi


# change to build dir to run ant
cd ${BUILD_DIR}

export ANT_OPTS="-Xmx512m"

# build app
BUILDCMD="$ANT_HOME/bin/ant -Duser.home=${BUILD_DIR}"
echo "-----> executing $BUILDCMD"

$BUILDCMD 2>&1 | indent
ls -al ${PWD}  | indent

ls -al ${BUILD_DIR}  | indent

if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app with Apache Ant"
  exit 1
fi
